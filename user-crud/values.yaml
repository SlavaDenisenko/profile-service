# Default values for user-crud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This block is for setting up information about the database container, connection settings and service
db_app:
  container:
    image:
      repository: postgres
      tag: "14"
    port: 5432
    volumeMount:
      name: postgres-storage
      mountPath: /var/lib/postgresql/data
    volumeClaimTemplates:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  connection:
    name: user-service
    username: postgres
    password: admin
  prometheus:
    enabled: true
    path: /metrics
    interval: 30s

exporter_db:
  image:
    repository: bitnami/postgres-exporter
    tag: "latest"
  port: 9187

# This block is for setting up application parameters
application:
  image:
    repository: sdenisenko/user-service
    # This sets the pull policy for image.
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.2"
  http:
    port: 8080
  hibernate:
    generation: none
    log: ALL
  prometheus:
    enabled: true
    interval: 30s
    histogram:
      enabled: true
      percentiles: 0.5,0.9,0.99

# This block is intended for setup an image for the database migration tool and a simple script
migration:
  image:
    repository: liquibase/liquibase
    tag: "4.27.0"
  volumeMount:
    name: changelog-volume
    rootPath: /liquibase
    mountPath: /changelog/changelog.yaml
  changelog:
    app: |
      databaseChangeLog:
            - changeSet:
                id: 1
                author: Vyacheslav Denisenko
                changes:
                  - createTable:
                      tableName: users
                      columns:
                        - column:
                            name: id
                            type: int
                            autoIncrement: true
                            constraints:
                              primaryKey: true
                        - column:
                            name: username
                            type: varchar(255)
                            constraints:
                              unique: true
                              nullable: false
                        - column:
                            name: firstname
                            type: varchar(255)
                            constraints:
                              nullable: false
                        - column:
                            name: lastname
                            type: varchar(255)
                            constraints:
                              nullable: false
                        - column:
                            name: email
                            type: varchar(255)
                            constraints:
                              nullable: false
                        - column:
                            name: phone
                            type: varchar(255)
                            constraints:
                              nullable: false
    auth: |
      databaseChangeLog:
      - changeSet:
          id: 1
          author: Vyacheslav Denisenko
          changes:
            - createTable:
                tableName: users
                columns:
                  - column:
                      name: id
                      type: int
                      autoIncrement: true
                      constraints:
                        primaryKey: true
                  - column:
                      name: username
                      type: varchar(255)
                      constraints:
                        unique: true
                        nullable: false
                  - column:
                      name: password
                      type: varchar(255)
                      constraints:
                        nullable: false

auth:
  image:
    repository: sdenisenko/auth-service
    pullPolicy: Always
    tag: "1.0"
  http:
    port: 8081
  hibernate:
    generation: none
    log: ALL

db_auth:
  container:
    image:
      repository: postgres
      tag: "14"
    port: 5432
    volumeMount:
      name: postgres-storage
      mountPath: /var/lib/postgresql/data
    volumeClaimTemplates:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  connection:
    name: users
    username: postgres
    password: password

# This will set the replicaset count
replicaCount: 5

config:
  application:
    name: app-config
  auth:
    name: auth-config

secrets:
  application:
    name: app-secret
  auth:
    name: auth-secret

services:
  application:
    name: "app-svc"
    port: 80
    type: ClusterIP
  db_app:
    name: "db-svc-postgres"
    port: 5439
  auth:
    name: "auth-svc"
    port: 8349
  db_auth:
    name: "db-svc-postgres-auth"
    port: 5440

# This is to override the chart name.
nameOverride: "user-crud"
fullnameOverride: "user-crud-service"

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels: {}

# This block is for setting up the ingress
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/auth-url: "{{ printf \"http://%s.%s.svc.cluster.local:%d/api/v1/auth/verify\" .Values.services.auth.name .Release.Namespace (int .Values.services.auth.port) }}"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-User-ID"
  hosts:
    - host: arch.homework
      paths:
        - path: /user/
          pathType: Prefix
          backend:
            service:
              name: application
          definition: |
            Use this path for GET, PUT requests, pointing after the slash {userId}.
              For example, /user/1.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

ingress_auth:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /api/v1/auth$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^ /api/v1/auth$request_uri break;
  hosts:
    - host: arch.homework
      paths:
        - path: /login
          pathType: Exact
          backend:
            service:
              name: auth
          definition: Login
        - path: /register
          pathType: Exact
          backend:
            service:
              name: auth
          definition: User registration

resources: {}

# This is to setup the liveness and readiness probes
livenessProbe:
  httpGet:
    path: /q/health/live
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 3
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /q/health/ready
    port: 8080
  initialDelaySeconds: 20
  periodSeconds: 20
  timeoutSeconds: 3
  failureThreshold: 3

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true